--SELECT
SELECT * FROM EMPLOYEE;
SELECT * FROM EMPLOYEE WHERE LASTNAME = 'King';
SELECT * FROM EMPLOYEE WHERE FIRSTNAME = 'Andrew' AND REPORTSTO IS NULL;

--ORDER BY
SELECT * FROM ALBUM ORDER BY TITLE DESC;
SELECT FIRSTNAME FROM CUSTOMER ORDER BY CITY ASC;

--INSERT INTO
INSERT INTO GENRE VALUES (26, 'newgenre1');
INSERT INTO GENRE VALUES (27, 'newgenre2');

INSERT INTO EMPLOYEE VALUES (9, 'Roberts', 'Brianna', 'IT', null, '10-OCT-95', '1-JAN-18', '1234 address', 'Reston', 'VA', 'USA', '20112', '123-456-7890', '123-456-7890', 'email@email.com');
INSERT INTO EMPLOYEE VALUES (10, 'Roberts', 'Brianna', 'IT', null, '10-OCT-95', '1-JAN-18', '1234 address', 'Reston', 'VA', 'USA', '20112', '123-456-7890', '123-456-7890', 'email@email.com');

INSERT INTO CUSTOMER VALUES (60, 'Roberts', 'Brianna', null, null, null, null, null, null, null, null, 'email@email.com', null);
INSERT INTO CUSTOMER VALUES (61, 'Roberts', 'Brianna', null, null, null, null, null, null, null, null, 'email@email.com', null);

--UPDATE
UPDATE CUSTOMER SET FIRSTNAME = 'Robert' WHERE FIRSTNAME ='Aaron' AND LASTNAME = 'Mitchell';
UPDATE CUSTOMER SET LASTNAME = 'Walter' WHERE FIRSTNAME ='Robert' AND LASTNAME = 'Mitchell';

UPDATE ARTIST SET NAME = 'CCR' WHERE NAME = 'Creedence Clearwater Revival';

--LIKE
SELECT * FROM INVOICE WHERE BILLINGADDRESS LIKE 'T%';

--SYSTEM DEFINED FUNCTIONS
CREATE OR REPLACE FUNCTION LENGTH_OF_NAME(NAME NUMBER)
RETURN NUMBER
AS
BEGIN
    RETURN LENGTH(NAME);
END LENGTH_OF_NAME
;
/

--SYSTEM DEFINED AGGREGATE FUNCTIONS
CREATE OR REPLACE FUNCTION AVG_INVOICES
RETURN NUMBER
IS
    AVERAGE NUMBER;
BEGIN
    SELECT AVG(TOTAL) INTO AVERAGE FROM INVOICE;
    RETURN (AVERAGE);
END AVG_INVOICES
;
/

CREATE OR REPLACE FUNCTION MOST_EXPENSIVE_TRACK
RETURN NUMBER
IS
    MAXIMUM NUMBER;
BEGIN
    SELECT MAX(UNITPRICE) INTO MAXIMUM FROM TRACK;
    RETURN MAXIMUM;
END MOST_EXPENSIVE_TRACK
;
/

--STORED PROCEDURES
CREATE OR REPLACE PROCEDURE NAME_EMPLOYEES
IS
    EMPLOYEE_NAME VARCHAR2(50);
BEGIN
    SELECT FIRSTNAME + LASTNAME INTO EMPLOYEE_NAME FROM EMPLOYEE;
COMMIT;
END;
/

CREATE OR REPLACE PROCEDURE UPDATE_EMPLOYEE_INFO(EMPLOYEEID NUMBER, LASTNAME VARCHAR2,
    FIRSTNAME VARCHAR2, TITLE VARCHAR2, REPORTSTO NUMBER, BIRTHDATE DATE, HIREDATE DATE,
    ADDRESS VARCHAR2, CITY VARCHAR2, STATE VARCHAR2, COUNTRY VARCHAR2, POSTALCODE VARCHAR2,
    PHONE VARCHAR2, FAX VARCHAR2, EMAIL VARCHAR2)
AS
BEGIN
    UPDATE EMPLOYEE SET EMPLOYEEID = EMPLOYEEID, LASTNAME = LASTNAME, 
    FIRSTNAME = FIRSTNAME, TITLE = TITLE, REPORTSTO = REPORTSTO, BIRTHDATE = BIRTHDATE,
    HIREDATE = HIREDATE, ADDRESS = ADDRESS, CITY = CITY, STATE = STATE,
    COUNTRY = COUNTRY, POSTALCODE = POSTALCODE, PHONE = PHONE, FAX = FAX,
    EMAIL = EMAIL;
COMMIT;
END;
/

--TRANSACTIONS
CREATE OR REPLACE PROCEDURE INSERT_CUSTOMER(CUSTOMERID NUMBER, FIRSTNAME VARCHAR2,
    LASTNAME VARCHAR2, COMPANY VARCHAR2, ADDRESS VARCHAR2, CITY VARCHAR2, STATE VARCHAR2,
    COUNTRY VARCHAR2, POSTALCODE VARCHAR2, PHONE VARCHAR2, FAX VARCHAR2, EMAIL VARCHAR2, SUPPORTREPID NUMBER)
AS
BEGIN
    INSERT INTO CUSTOMER VALUES(CUSTOMERID, FIRSTNAME, LASTNAME, COMPANY, ADDRESS,
    CITY, STATE, COUNTRY, POSTALCODE, PHONE, FAX, EMAIL, SUPPORTREPID);
COMMIT;
END;
/

--TRIGGERS
CREATE OR REPLACE TRIGGER INSERT_EMPLOYEE
AFTER INSERT ON EMPLOYEE
DECLARE
    EMPLOYEE_NUM NUMBER;
BEGIN
    SELECT COUNT(EMPLOYEEID) INTO EMPLOYEE_NUM FROM EMPLOYEE;
END;
/

--JOINS
SELECT INVOICE.CUSTOMERID, CUSTOMER.FIRSTNAME, CUSTOMER.LASTNAME, INVOICE.INVOICEID
FROM INVOICE
INNER JOIN CUSTOMER ON CUSTOMER.CUSTOMERID = INVOICE.CUSTOMERID;

SELECT CUSTOMER.CUSTOMERID, CUSTOMER.FIRSTNAME, CUSTOMER.LASTNAME, INVOICE.INVOICEID, INVOICE.TOTAL
FROM INVOICE
FULL OUTER JOIN CUSTOMER ON CUSTOMER.CUSTOMERID = INVOICE.CUSTOMERID;